name: Spring Boot CI

on:
  push: # 当有代码被推送（push）到main分支时，工作流将被触发。
    branches: [ main ]
  pull_request: # 当有拉取请求（pull request）针对main分支被创建或更新时，工作流将被触发
    branches: [ main ]
# [ main ] 指定了一个数组，列出了哪些分支的push或pull request事件会触发工作流

jobs:
  build-and-publish:
    env:
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_REGISTRY: registry.cn-guangzhou.aliyuncs.com
    runs-on: ubuntu-latest #在 GitHub Actions 工作流中用于指定运行作业的环境,不是在 Docker 镜像内安装 Ubuntu，而是指定了 GitHub Actions 执行该作业的虚拟机环境
    steps: # 表示工作流程中的一系列步骤，每个步骤可以执行一个任务，例如检出代码、安装依赖、运行脚本等
      - name: Checkout code # 步骤的名称
        # 工作流程运行时,在GitHub Actions的虚拟环境中创建您的仓库的一个副本，后续的步骤（例如安装依赖、构建、测试等）都会在这个副本上执行. v2:第二个版本
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt' # 使用的JDK发行版是AdoptOpenJDK
          maven: 'true' # 确保Maven也被安装
      - name: Cache Maven packages # 缓存Maven的依赖项，可以避免每次都从头下载所有依赖,以加快后续构建的速度
        uses: actions/cache@v2
        with:
          path: ~/.m2 # 指定了要缓存的目录路径。~/.m2是Maven的本地仓库的默认位置，这里存储了Maven下载的所有依赖项
          # 设置一个唯一的键来保存和检索缓存。这个键包含了运行者的操作系统（runner.os），一个固定的字符串（m2），以及所有pom.xml文件内容的哈希值
          # 如果pom.xml文件没有更改，GitHub Actions就会重用已有的缓存，而不是重新下载所有依赖项
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn package # 直接使用mvn命令
      - name: build-docker-image
        run: | # 登录阿里云镜像仓库，打包项目jar包并上传到远程阿里云仓库
          docker login --username=helloenen -p $DOCKER_PASSWORD $DOCKER_REGISTRY
          docker rmi -f $DOCKER_REGISTRY/my-world-enen/helloenen:latest
          docker build -t $DOCKER_REGISTRY/my-world-enen/helloenen:latest .
          docker push $DOCKER_REGISTRY/my-world-enen/helloenen:latest
  deploy-enen:
    needs: build-and-publish
    env: # 定义环境变量
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_REGISTRY: registry.cn-guangzhou.aliyuncs.com
      SERVER_USERNAME: root
      SERVER_HOST: 8.134.180.176
    runs-on: ubuntu-latest
    steps:
      # 由于我们是托管在GitHub运行器（不在自己的服务器上运行），而不是自托管运行器，所以不能用--env-file=/opt/myworld-enen-prod/env来指定服务器上
      # 的环境变量文件，只能将变量值保存在GitHub的Secrets，再读取值到服务器的文件，让docker读取
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # scipt运行的是 shell 脚本，会按照标准的 shell 环境变量规则来解析变量，一般不用${{ env.DOCKER_REGISTRY }}，但这里必须用
          # ${{ env.DOCKER_REGISTRY }}，不能用$DOCKER_REGISTRY来获取变量值（会获取到空值），应该是因为这段脚本是在Github Actions定义，
          # 而实际是在服务器上运行
          # echo docker pull ${{ env.DOCKER_REGISTRY }}/my-world-enen/helloenen:latest
          # 注意：script里最好不要写注释，不然可能会导致yml格式校验出错
          script: |
            echo docker pull $DOCKER_REGISTRY/my-world-enen/helloenen:latest
            echo docker pull ${{ env.DOCKER_REGISTRY }}/my-world-enen/helloenen:latest
            docker pull ${{ env.DOCKER_REGISTRY }} /my-world-enen/helloenen:latest
            docker rm -f my-world-enen || true
            docker run --network host -v /nas/my-world-enen:/app/temp --env-file /opt/myworld-enen-prod/env -d --name=my-world-enen ${{ env.DOCKER_REGISTRY }}/my-world-enen/helloenen:latest java -jar /app.jar
            docker system prune -f




